import { Inject, Injectable, OnModuleInit } from '@nestjs/common';
import { App } from 'firebase-admin/app';
import { getDatabase } from 'firebase-admin/database';
import { getFirestore } from 'firebase-admin/firestore';
import { NotificationService } from './notification.service';

@Injectable()
export class NotificationListener implements OnModuleInit {
  private previousCanhbao: Record<string, boolean> = {};

  constructor(
    @Inject('FIREBASE_ADMIN') private readonly firebaseApp: App,
    private readonly notificationService: NotificationService,
  ) {}

  onModuleInit() {
    const realtimeDb = getDatabase(this.firebaseApp);
    const firestore = getFirestore(this.firebaseApp);
    const ref = realtimeDb.ref('biensotrongbai');
    
    ref.on('child_changed', async (snapshot) => {
      const biensoxe = snapshot.key!;
      const data = snapshot.val();
      const currentCanhbao: boolean | null = data.canhbao ?? null;
      const currentExpiredTime: string | null = data.timeExpired ?? null;

      const previous = this.previousCanhbao[biensoxe];
      if (typeof currentCanhbao === 'boolean' && currentCanhbao !== previous) {
        this.previousCanhbao[biensoxe] = currentCanhbao;

        if (currentCanhbao === true) {
          console.log(`üö® C·∫£nh b√°o m·ªõi t·ª´ bi·ªÉn s·ªë: ${biensoxe}`);

          try {
            const querySnapshot = await firestore
              .collection('thongtindangky')
              .where('biensoxe', '==', biensoxe)
              .get();

            if (querySnapshot.empty) {
              console.warn(`Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng c√≥ bi·ªÉn s·ªë: ${biensoxe}`);
              return;
            }

            querySnapshot.forEach(async (doc) => {
              const userData = doc.data();
              const fcmTokens: string[] = userData.fcmTokens ?? [];

              if (!fcmTokens.length) {
                console.warn(
                  `Kh√¥ng t√¨m th·∫•y FCM token cho bi·ªÉn s·ªë: ${biensoxe}`,
                );
                return;
              }

              await this.notificationService.sendPush({
                deviceId: fcmTokens,
                title: 'üö® C·∫£nh b√°o xe',
                body: `B·∫°n ƒëang chu·∫©n b·ªã ra kh·ªèi nh√† xe ƒë√∫ng kh√¥ng?`,
                // data: {
                //   route: 'thongbao', // ho·∫∑c truy·ªÅn th√™m biensoxe n·∫øu c·∫ßn
                //   biensoxe: biensoxe,
                // },
              });
            });
          } catch (error) {
            console.error(`L·ªói khi truy v·∫•n firestore: ${error}`);
          }
        }
      } else if (typeof currentExpiredTime === 'string') {
        const now = new Date();
        const THIRTY_MINUTES_MS = 30 * 60 * 1000;

        // Parse chu·ªói ng√†y gi·ªù
        const expiredDate = new Date(currentExpiredTime.replace(' ', 'T')); // "2025-07-26 19:40:45" ‚Üí "2025-07-26T19:40:45"

        if (isNaN(expiredDate.getTime())) {
          console.warn(`‚ö†Ô∏è expiredTime kh√¥ng h·ª£p l·ªá: ${currentExpiredTime}`);
          return;
        }

        const remaining = expiredDate.getTime() - now.getTime();

        if (remaining <= THIRTY_MINUTES_MS && remaining > 0) {
          console.log(`‚è∞ Bi·ªÉn s·ªë ${biensoxe} s·∫Øp h·∫øt h·∫°n trong ${Math.floor(remaining / 60000)} ph√∫t`);

          try {
            const querySnapshot = await firestore
              .collection('thongtindangky')
              .where('biensophu.bienSo', '==', biensoxe)
              .get();

            if (querySnapshot.empty) {
              console.warn(`Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng c√≥ bi·ªÉn ph·ª•: ${biensoxe}`);
              return;
            }

            querySnapshot.forEach(async (doc) => {
              const userData = doc.data();
              console.log(userData.email)
              const fcmTokens: string[] = userData.fcmTokens ?? [];

              if (!fcmTokens.length) {
                console.warn(`Kh√¥ng c√≥ FCM token cho bi·ªÉn ph·ª•: ${biensoxe}`);
                return;
              }

              await this.notificationService.sendPush({
                deviceId: fcmTokens,
                title: '‚è∞ Bi·ªÉn ph·ª• s·∫Øp h·∫øt h·∫°n',
                body: `Bi·ªÉn s·ªë ph·ª• ${biensoxe} s·∫Ω h·∫øt h·∫°n sau 30 ph√∫t n·ªØa.`,
              });
            });
          } catch (error) {
            console.error(`L·ªói khi g·ª≠i th√¥ng b√°o h·∫øt h·∫°n: ${error}`);
          }
        }
      }
    });
  }
}
